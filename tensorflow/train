#!/usr/bin/python3

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import os
import json
import pickle
import sys
import traceback
import signal
import tensorflow as tf
import subprocess
import pandas as pd
import threading
import time


# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name = 'training'
training_path = os.path.join(input_path, channel_name)

# To pick the max_run_time hyperparameter and terminate it in that time
start_time = time.time()
def timed_loop():
    with open(param_path, 'r') as tc:
        trainingParams = json.load(tc)
    print("trainingParams: ", trainingParams)
    max_run_time = trainingParams["max_run_time"]
    i = 1
    while True:
        time.sleep(1)
        current_time = time.time()
        if current_time - start_time > int(max_run_time):
            print("Training time max_run_time completed. Will exit now")
            os._exit(0)
        # print(i)
        i += 1

threading.Thread(target=timed_loop).start()

def signal_handler(signum, frame):
    if signum == signal.SIGTERM:
        print("SIGTERM received. Nothing to do here, since model checkpoints are being saved in output already")
        os._exit(0)
    elif signum == signal.SIGINT:
        print("SIGINT received. Nothing to do here, since model checkpoints are being saved in output already")
        os._exit(0)

signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

# The function to execute the training.
def train():
    print('Starting the training. Python 2.x will fail. Python version is: ', sys.version)
    try:
        # Read in any hyperparameters that the user passed with the training job
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)

        # Take the set of files and read them all into a single pandas dataframe
        input_files = [os.path.join(training_path, file)
                       for file in os.listdir(training_path)]
        if len(input_files) == 0:
            raise ValueError(('There are no files in {}.\n' +
                              'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))



        # call the object detection api
        # /opt/ml/model/data will store training output artifact
        os.chdir("models/research")
        start_training = ["python", "object_detection/train.py", "--logtostderr", "--pipeline_config_path=../../faster_rcnn_resnet101_pets.config", "--train_dir=/opt/ml/model/data"]
        subprocess.run(start_training)
        print('Training complete.')
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' +
              str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)


if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
